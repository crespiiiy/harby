/**
 * نظام تحليل الثغرات الأمنية
 * يقوم بفحص المواقع والتطبيقات لاكتشاف نقاط الضعف المحتملة
 */

class VulnerabilityScanner {
    constructor() {
        this.scanInProgress = false;
        this.scanTypes = [
            { id: 'xss', name: 'Cross-Site Scripting (XSS)', checked: true },
            { id: 'sqli', name: 'SQL Injection', checked: true },
            { id: 'csrf', name: 'Cross-Site Request Forgery (CSRF)', checked: true },
            { id: 'ssrf', name: 'Server-Side Request Forgery (SSRF)', checked: false },
            { id: 'rce', name: 'Remote Code Execution', checked: false },
            { id: 'lfi', name: 'Local File Inclusion', checked: false },
            { id: 'open-redirect', name: 'Open Redirect', checked: true },
            { id: 'broken-auth', name: 'Broken Authentication', checked: true },
            { id: 'sensitive-data', name: 'Sensitive Data Exposure', checked: true },
            { id: 'xxe', name: 'XML External Entities (XXE)', checked: false }
        ];
        
        // قائمة بالثغرات المحتملة للمحاكاة
        this.vulnerabilities = [
            {
                type: 'xss',
                severity: 'high',
                description: 'تم اكتشاف ثغرة XSS في نموذج البحث',
                details: 'يمكن حقن أكواد JavaScript في حقل البحث وتنفيذها عند عرض النتائج.',
                recommendation: 'تطبيق ترميز HTML وتصفية المدخلات قبل عرضها.'
            },
            {
                type: 'sqli',
                severity: 'critical',
                description: 'ثغرة حقن SQL في صفحة تسجيل الدخول',
                details: 'يمكن استخدام تقنيات حقن SQL لتجاوز المصادقة أو استخراج بيانات من قاعدة البيانات.',
                recommendation: 'استخدام الاستعلامات المعدة مسبقًا (Prepared Statements) وتصفية المدخلات.'
            },
            {
                type: 'csrf',
                severity: 'medium',
                description: 'عدم وجود حماية ضد هجمات CSRF',
                details: 'لا يتم استخدام رموز CSRF للتحقق من صحة الطلبات.',
                recommendation: 'تنفيذ رموز CSRF وتحقق من صحتها لجميع الطلبات التي تغير الحالة.'
            },
            {
                type: 'open-redirect',
                severity: 'low',
                description: 'ثغرة إعادة توجيه مفتوحة في معلمة URL "redirect"',
                details: 'يمكن استخدام معلمة "redirect" لإعادة توجيه المستخدمين إلى مواقع خارجية.',
                recommendation: 'التحقق من صحة عناوين URL المستخدمة في إعادة التوجيه والسماح فقط بالمواقع الموثوقة.'
            },
            {
                type: 'sensitive-data',
                severity: 'high',
                description: 'تسرب معلومات حساسة في التعليقات HTML',
                details: 'تم العثور على معلومات حساسة (مثل بيانات الاعتماد أو المفاتيح) في تعليقات HTML.',
                recommendation: 'إزالة جميع المعلومات الحساسة من التعليقات والشفرة المصدرية.'
            },
            {
                type: 'broken-auth',
                severity: 'high',
                description: 'ضعف في آلية إعادة تعيين كلمة المرور',
                details: 'لا يتم التحقق بشكل صحيح من هوية المستخدم أثناء عملية إعادة تعيين كلمة المرور.',
                recommendation: 'تنفيذ عملية تحقق قوية وإرسال رموز فريدة لمرة واحدة عبر قناة آمنة.'
            }
        ];
    }
    
    /**
     * تهيئة نظام تحليل الثغرات
     */
    initialize() {
        // إضافة مستمعي الأحداث للأزرار
        document.getElementById('start-scan-btn').addEventListener('click', this.startScan.bind(this));
        document.getElementById('stop-scan-btn').addEventListener('click', this.stopScan.bind(this));
        
        // تهيئة قائمة أنواع الفحص
        this.initializeScanTypes();
    }
    
    /**
     * تهيئة قائمة أنواع الفحص
     */
    initializeScanTypes() {
        const scanTypesContainer = document.getElementById('scan-types');
        
        // إنشاء خانات الاختيار لأنواع الفحص
        this.scanTypes.forEach(type => {
            const checkboxDiv = document.createElement('div');
            checkboxDiv.className = 'form-check';
            
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'form-check-input';
            checkbox.id = `scan-type-${type.id}`;
            checkbox.checked = type.checked;
            
            const label = document.createElement('label');
            label.className = 'form-check-label';
            label.htmlFor = `scan-type-${type.id}`;
            label.textContent = type.name;
            
            checkboxDiv.appendChild(checkbox);
            checkboxDiv.appendChild(label);
            scanTypesContainer.appendChild(checkboxDiv);
        });
    }
    
    /**
     * بدء عملية الفحص
     */
    startScan() {
        if (this.scanInProgress) {
            return;
        }
        
        const targetUrl = document.getElementById('target-url').value;
        const scanDepth = document.getElementById('scan-depth').value;
        const scanSpeed = document.getElementById('scan-speed').value;
        
        // التحقق من صحة URL
        if (!this.isValidUrl(targetUrl)) {
            this.showMessage('يرجى إدخال عنوان URL صالح', 'error');
            return;
        }
        
        // الحصول على أنواع الفحص المحددة
        const selectedScanTypes = this.scanTypes
            .filter(type => document.getElementById(`scan-type-${type.id}`).checked)
            .map(type => type.id);
        
        if (selectedScanTypes.length === 0) {
            this.showMessage('يرجى تحديد نوع فحص واحد على الأقل', 'error');
            return;
        }
        
        // بدء عملية الفحص
        this.scanInProgress = true;
        document.getElementById('start-scan-btn').disabled = true;
        document.getElementById('stop-scan-btn').disabled = false;
        
        // تهيئة واجهة المستخدم
        const progressBar = document.getElementById('scan-progress');
        const progressText = document.getElementById('scan-progress-text');
        const logContainer = document.getElementById('scan-log');
        const resultsContainer = document.getElementById('scan-results');
        
        progressBar.style.width = '0%';
        progressBar.setAttribute('aria-valuenow', 0);
        progressText.textContent = 'جاري الفحص: 0%';
        logContainer.innerHTML = '';
        resultsContainer.innerHTML = '';
        
        // إضافة سجل بدء الفحص
        this.addLogEntry(`بدء فحص الموقع: ${targetUrl}`);
        this.addLogEntry(`عمق الفحص: ${scanDepth}`);
        this.addLogEntry(`سرعة الفحص: ${scanSpeed === 'fast' ? 'سريع' : (scanSpeed === 'normal' ? 'عادي' : 'بطيء')}`);
        this.addLogEntry(`أنواع الفحص المحددة: ${selectedScanTypes.length}`);
        
        // محاكاة عملية الفحص
        this.simulateScan(targetUrl, selectedScanTypes, scanDepth, scanSpeed);
    }
    
    /**
     * إيقاف عملية الفحص
     */
    stopScan() {
        if (!this.scanInProgress) {
            return;
        }
        
        // إيقاف المؤقتات
        if (this.scanInterval) {
            clearInterval(this.scanInterval);
        }
        
        if (this.logInterval) {
            clearInterval(this.logInterval);
        }
        
        // تحديث واجهة المستخدم
        this.scanInProgress = false;
        document.getElementById('start-scan-btn').disabled = false;
        document.getElementById('stop-scan-btn').disabled = true;
        
        // إضافة سجل إيقاف الفحص
        this.addLogEntry('تم إيقاف الفحص بواسطة المستخدم', 'warning');
    }
    
    /**
     * محاكاة عملية الفحص
     * @param {string} url - عنوان URL المراد فحصه
     * @param {Array} scanTypes - أنواع الفحص المحددة
     * @param {number} depth - عمق الفحص
     * @param {string} speed - سرعة الفحص
     */
    simulateScan(url, scanTypes, depth, speed) {
        let progress = 0;
        const progressBar = document.getElementById('scan-progress');
        const progressText = document.getElementById('scan-progress-text');
        
        // تحديد فترة التحديث بناءً على السرعة
        const updateInterval = speed === 'fast' ? 200 : (speed === 'normal' ? 500 : 1000);
        
        // محاكاة تقدم الفحص
        this.scanInterval = setInterval(() => {
            progress += Math.random() * 5;
            if (progress >= 100) {
                progress = 100;
                clearInterval(this.scanInterval);
                clearInterval(this.logInterval);
                
                // اكتمال الفحص
                this.scanInProgress = false;
                document.getElementById('start-scan-btn').disabled = false;
                document.getElementById('stop-scan-btn').disabled = true;
                
                // إضافة سجل اكتمال الفحص
                this.addLogEntry('اكتمل الفحص بنجاح', 'success');
                
                // عرض نتائج الفحص
                this.displayScanResults(url, scanTypes);
            }
            
            // تحديث شريط التقدم
            progressBar.style.width = progress + '%';
            progressBar.setAttribute('aria-valuenow', progress);
            progressText.textContent = `جاري الفحص: ${Math.floor(progress)}%`;
        }, updateInterval);
        
        // محاكاة سجلات الفحص
        const logMessages = [
            `فحص الصفحة الرئيسية: ${url}`,
            'جاري تحليل هيكل HTML',
            'فحص نماذج الإدخال',
            'فحص طلبات AJAX',
            'تحليل ملفات JavaScript',
            'فحص ملفات CSS',
            'تحليل الكوكيز وجلسات العمل',
            'فحص رؤوس HTTP',
            'تحليل سياسة أمان المحتوى',
            'فحص إعدادات CORS',
            'تحليل روابط الموقع',
            'فحص نقاط النهاية API',
            'تحليل آليات المصادقة',
            'فحص تكوين HTTPS',
            'تحليل تكوين الخادم'
        ];
        
        let logIndex = 0;
        this.logInterval = setInterval(() => {
            if (logIndex < logMessages.length) {
                this.addLogEntry(logMessages[logIndex]);
                logIndex++;
            }
        }, updateInterval * 3);
    }
    
    /**
     * عرض نتائج الفحص
     * @param {string} url - عنوان URL الذي تم فحصه
     * @param {Array} scanTypes - أنواع الفحص التي تم إجراؤها
     */
    displayScanResults(url, scanTypes) {
        const resultsContainer = document.getElementById('scan-results');
        
        // إنشاء عنوان النتائج
        const resultsHeader = document.createElement('div');
        resultsHeader.className = 'alert alert-info';
        resultsHeader.innerHTML = `
            <h4><i class="fas fa-clipboard-check me-2"></i> نتائج فحص الموقع</h4>
            <p>تم فحص: ${url}</p>
            <p>عدد الثغرات المكتشفة: <span id="vulnerabilities-count">0</span></p>
        `;
        resultsContainer.appendChild(resultsHeader);
        
        // فلترة الثغرات بناءً على أنواع الفحص المحددة
        const filteredVulnerabilities = this.vulnerabilities.filter(vuln => scanTypes.includes(vuln.type));
        
        // تحديث عدد الثغرات
        document.getElementById('vulnerabilities-count').textContent = filteredVulnerabilities.length;
        
        // إنشاء جدول النتائج
        if (filteredVulnerabilities.length > 0) {
            const table = document.createElement('table');
            table.className = 'table table-striped table-hover';
            
            // إنشاء رأس الجدول
            const thead = document.createElement('thead');
            thead.innerHTML = `
                <tr>
                    <th scope="col">الخطورة</th>
                    <th scope="col">النوع</th>
                    <th scope="col">الوصف</th>
                    <th scope="col">التفاصيل</th>
                </tr>
            `;
            table.appendChild(thead);
            
            // إنشاء جسم الجدول
            const tbody = document.createElement('tbody');
            filteredVulnerabilities.forEach(vuln => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <span class="badge bg-${this.getSeverityColor(vuln.severity)}">
                            ${this.getSeverityText(vuln.severity)}
                        </span>
                    </td>
                    <td>${this.getVulnerabilityTypeName(vuln.type)}</td>
                    <td>${vuln.description}</td>
                    <td>
                        <button class="btn btn-sm btn-info" data-bs-toggle="modal" data-bs-target="#vulnerability-details-modal" data-vulnerability-id="${filteredVulnerabilities.indexOf(vuln)}">
                            <i class="fas fa-info-circle"></i> التفاصيل
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            table.appendChild(tbody);
            
            resultsContainer.appendChild(table);
            
            // إنشاء زر تصدير التقرير
            const exportButton = document.createElement('button');
            exportButton.className = 'btn btn-primary mt-3';
            exportButton.innerHTML = '<i class="fas fa-file-export me-2"></i> تصدير التقرير';
            exportButton.onclick = () => {
                this.showMessage('تم تصدير التقرير بنجاح', 'success');
            };
            resultsContainer.appendChild(exportButton);
            
            // إضافة مستمع لأزرار التفاصيل
            document.querySelectorAll('[data-vulnerability-id]').forEach(button => {
                button.addEventListener('click', (event) => {
                    const vulnId = event.currentTarget.getAttribute('data-vulnerability-id');
                    this.showVulnerabilityDetails(filteredVulnerabilities[vulnId]);
                });
            });
        } else {
            // لا توجد ثغرات
            const noVulnerabilities = document.createElement('div');
            noVulnerabilities.className = 'alert alert-success';
            noVulnerabilities.innerHTML = `
                <i class="fas fa-shield-alt me-2"></i> لم يتم اكتشاف أي ثغرات أمنية في الموقع.
            `;
            resultsContainer.appendChild(noVulnerabilities);
        }
    }
    
    /**
     * عرض تفاصيل الثغرة
     * @param {Object} vulnerability - الثغرة المراد عرض تفاصيلها
     */
    showVulnerabilityDetails(vulnerability) {
        const modal = document.getElementById('vulnerability-details-modal');
        const modalTitle = modal.querySelector('.modal-title');
        const modalBody = modal.querySelector('.modal-body');
        
        // تعيين عنوان النافذة
        modalTitle.textContent = vulnerability.description;
        
        // تعيين محتوى النافذة
        modalBody.innerHTML = `
            <div class="mb-3">
                <h5>التفاصيل:</h5>
                <p>${vulnerability.details}</p>
            </div>
            <div class="mb-3">
                <h5>التوصيات:</h5>
                <p>${vulnerability.recommendation}</p>
            </div>
            <div class="mb-3">
                <h5>الخطورة:</h5>
                <span class="badge bg-${this.getSeverityColor(vulnerability.severity)}">
                    ${this.getSeverityText(vulnerability.severity)}
                </span>
            </div>
            <div class="mb-3">
                <h5>النوع:</h5>
                <p>${this.getVulnerabilityTypeName(vulnerability.type)}</p>
            </div>
        `;
    }
    
    /**
     * إضافة سجل إلى سجل الفحص
     * @param {string} message - رسالة السجل
     * @param {string} type - نوع السجل (info, success, warning, error)
     */
    addLogEntry(message, type = 'info') {
        const logContainer = document.getElementById('scan-log');
        const logEntry = document.createElement('div');
        
        // تعيين فئة السجل
        logEntry.className = 'log-entry';
        
        // تعيين أيقونة السجل
        let icon = 'info-circle';
        if (type === 'success') {
            icon = 'check-circle';
        } else if (type === 'warning') {
            icon = 'exclamation-triangle';
        } else if (type === 'error') {
            icon = 'times-circle';
        }
        
        // تعيين لون السجل
        let color = 'var(--info-color)';
        if (type === 'success') {
            color = 'var(--success-color)';
        } else if (type === 'warning') {
            color = 'var(--warning-color)';
        } else if (type === 'error') {
            color = 'var(--danger-color)';
        }
        
        // تعيين محتوى السجل
        const timestamp = new Date().toLocaleTimeString();
        logEntry.innerHTML = `
            <span class="log-time">[${timestamp}]</span>
            <span class="log-icon" style="color: ${color}"><i class="fas fa-${icon}"></i></span>
            <span class="log-message">${message}</span>
        `;
        
        // إضافة السجل إلى الحاوية
        logContainer.appendChild(logEntry);
        
        // التمرير إلى أسفل
        logContainer.scrollTop = logContainer.scrollHeight;
    }
    
    /**
     * التحقق من صحة URL
     * @param {string} url - عنوان URL المراد التحقق منه
     * @returns {boolean} - هل URL صالح
     */
    isValidUrl(url) {
        try {
            new URL(url);
            return true;
        } catch (error) {
            return false;
        }
    }
    
    /**
     * الحصول على لون الخطورة
     * @param {string} severity - مستوى الخطورة
     * @returns {string} - لون الخطورة
     */
    getSeverityColor(severity) {
        switch (severity) {
            case 'critical':
                return 'danger';
            case 'high':
                return 'danger';
            case 'medium':
                return 'warning';
            case 'low':
                return 'info';
            case 'info':
                return 'secondary';
            default:
                return 'secondary';
        }
    }
    
    /**
     * الحصول على نص الخطورة
     * @param {string} severity - مستوى الخطورة
     * @returns {string} - نص الخطورة
     */
    getSeverityText(severity) {
        switch (severity) {
            case 'critical':
                return 'حرجة';
            case 'high':
                return 'عالية';
            case 'medium':
                return 'متوسطة';
            case 'low':
                return 'منخفضة';
            case 'info':
                return 'معلومات';
            default:
                return 'غير معروفة';
        }
    }
    
    /**
     * الحصول على اسم نوع الثغرة
     * @param {string} type - نوع الثغرة
     * @returns {string} - اسم نوع الثغرة
     */
    getVulnerabilityTypeName(type) {
        const scanType = this.scanTypes.find(t => t.id === type);
        return scanType ? scanType.name : type;
    }
    
    /**
     * عرض رسالة للمستخدم
     * @param {string} message - نص الرسالة
     * @param {string} type - نوع الرسالة (success, error, info)
     */
    showMessage(message, type) {
        const toast = document.getElementById('toast');
        const toastBody = toast.querySelector('.toast-body');
        
        // تعيين نص الرسالة
        toastBody.textContent = message;
        
        // تعيين لون الرسالة حسب النوع
        toast.className = 'toast';
        if (type === 'error') {
            toast.classList.add('bg-danger', 'text-white');
        } else if (type === 'success') {
            toast.classList.add('bg-success', 'text-white');
        } else {
            toast.classList.add('bg-info', 'text-white');
        }
        
        // عرض الرسالة
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
    }
}

// إنشاء كائن من نظام تحليل الثغرات
const vulnerabilityScanner = new VulnerabilityScanner();

// تهيئة النظام عند تحميل الصفحة
document.addEventListener('DOMContentLoaded', () => {
    vulnerabilityScanner.initialize();
});
